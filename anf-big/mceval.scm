(letrec ((self-evaluating? (lambda (exp) (let ((_33 (number? exp))) (let ((_31 _33)) (if _31 #t (let ((_34 (string? exp))) (let ((_32 _34)) (if _32 #t #f))))))))) (letrec ((variable? (lambda (exp) (symbol? exp)))) (letrec ((tagged-list? (lambda (exp tag) (let ((_38 (pair? exp))) (let ((_35 _38)) (if _35 (let ((_39 (car exp))) (let ((_36 _39)) (let ((_40 (eq? _36 tag))) (let ((_37 _40)) _37)))) #f)))))) (letrec ((quoted? (lambda (exp) (let ((_43 (quote quote))) (let ((_41 _43)) (let ((_44 (tagged-list? exp _41))) (let ((_42 _44)) _42))))))) (letrec ((text-of-quotation (lambda (exp) (cadr exp)))) (letrec ((assignment? (lambda (exp) (let ((_47 (quote set!))) (let ((_45 _47)) (let ((_48 (tagged-list? exp _45))) (let ((_46 _48)) _46))))))) (letrec ((assignment-variable (lambda (exp) (cadr exp)))) (letrec ((assignment-value (lambda (exp) (caddr exp)))) (letrec ((definition? (lambda (exp) (let ((_51 (quote define))) (let ((_49 _51)) (let ((_52 (tagged-list? exp _49))) (let ((_50 _52)) _50))))))) (letrec ((definition-variable (lambda (exp) (let ((_57 (cadr exp))) (let ((_55 _57)) (let ((_53 _55)) (let ((_58 (symbol? _53))) (let ((_56 _58)) (let ((_54 _56)) (if _54 (cadr exp) (caadr exp))))))))))) (letrec ((make-lambda (lambda (parameters body) (let ((_62 (quote lambda))) (let ((_59 _62)) (let ((_63 (cons parameters body))) (let ((_60 _63)) (let ((_64 (cons _59 _60))) (let ((_61 _64)) _61))))))))) (letrec ((definition-value (lambda (exp) (let ((_72 (cadr exp))) (let ((_67 _72)) (let ((_65 _67)) (let ((_73 (symbol? _65))) (let ((_68 _73)) (let ((_66 _68)) (if _66 (caddr exp) (let ((_74 (cdadr exp))) (let ((_69 _74)) (let ((_75 (cddr exp))) (let ((_70 _75)) (let ((_76 (make-lambda _69 _70))) (let ((_71 _76)) _71)))))))))))))))) (letrec ((lambda? (lambda (exp) (let ((_79 (quote lambda))) (let ((_77 _79)) (let ((_80 (tagged-list? exp _77))) (let ((_78 _80)) _78))))))) (letrec ((lambda-parameters (lambda (exp) (cadr exp)))) (letrec ((lambda-body (lambda (exp) (cddr exp)))) (letrec ((if? (lambda (exp) (let ((_83 (quote if))) (let ((_81 _83)) (let ((_84 (tagged-list? exp _81))) (let ((_82 _84)) _82))))))) (letrec ((if-predicate (lambda (exp) (cadr exp)))) (letrec ((if-consequent (lambda (exp) (caddr exp)))) (letrec ((if-alternative (lambda (exp) (let ((_93 (cdddr exp))) (let ((_90 _93)) (let ((_87 _90)) (let ((_85 _87)) (let ((_94 (null? _85))) (let ((_91 _94)) (let ((_88 _91)) (let ((_86 _88)) (let ((_95 (not _86))) (let ((_92 _95)) (let ((_89 _92)) (if _89 (cadddr exp) (quote false)))))))))))))))) (letrec ((make-if (lambda (predicate consequent alternative) (let ((_98 (quote if))) (let ((_96 _98)) (let ((_99 (list _96 predicate consequent alternative))) (let ((_97 _99)) _97))))))) (letrec ((begin? (lambda (exp) (let ((_102 (quote begin))) (let ((_100 _102)) (let ((_103 (tagged-list? exp _100))) (let ((_101 _103)) _101))))))) (letrec ((begin-actions (lambda (exp) (cdr exp)))) (letrec ((last-exp? (lambda (seq) (let ((_106 (cdr seq))) (let ((_104 _106)) (let ((_107 (null? _104))) (let ((_105 _107)) _105))))))) (letrec ((first-exp (lambda (seq) (car seq)))) (letrec ((rest-exps (lambda (seq) (cdr seq)))) (letrec ((mk-begin (lambda (seq) (let ((_110 (quote begin))) (let ((_108 _110)) (let ((_111 (cons _108 seq))) (let ((_109 _111)) _109))))))) (letrec ((sequence->exp (lambda (seq) (let ((_114 (null? seq))) (let ((_112 _114)) (if _112 seq (let ((_115 (last-exp? seq))) (let ((_113 _115)) (if _113 (first-exp seq) (mk-begin seq)))))))))) (letrec ((application? (lambda (exp) (pair? exp)))) (letrec ((operator (lambda (exp) (car exp)))) (letrec ((operands (lambda (exp) (cdr exp)))) (letrec ((no-operands? (lambda (ops) (null? ops)))) (letrec ((first-operand (lambda (ops) (car ops)))) (letrec ((rest-operands (lambda (ops) (cdr ops)))) (letrec ((list-of-values (lambda (exps env) (let ((_126 (no-operands? exps))) (let ((_116 _126)) (if _116 (quote ()) (let ((_127 (first-operand exps))) (let ((_121 _127)) (let ((_117 _121)) (let ((_128 (eval _117 env))) (let ((_122 _128)) (let ((_118 _122)) (let ((_129 (rest-operands exps))) (let ((_123 _129)) (let ((_119 _123)) (let ((_130 (list-of-values _119 env))) (let ((_124 _130)) (let ((_120 _124)) (let ((_131 (cons _118 _120))) (let ((_125 _131)) _125)))))))))))))))))))) (letrec ((cond? (lambda (exp) (let ((_134 (quote cond))) (let ((_132 _134)) (let ((_135 (tagged-list? exp _132))) (let ((_133 _135)) _133))))))) (letrec ((cond-clauses (lambda (exp) (cdr exp)))) (letrec ((cond-predicate (lambda (clause) (car clause)))) (letrec ((cond-else-clause? (lambda (clause) (let ((_139 (cond-predicate clause))) (let ((_136 _139)) (let ((_140 (quote else))) (let ((_137 _140)) (let ((_141 (eq? _136 _137))) (let ((_138 _141)) _138))))))))) (letrec ((cond-actions (lambda (clause) (cdr clause)))) (letrec ((expand-clauses (lambda (clauses) (let ((_156 (null? clauses))) (let ((_142 _156)) (if _142 (quote false) (let ((_157 (car clauses))) (let ((_143 _157)) (let ((first _143)) (let ((_158 (cdr clauses))) (let ((_144 _158)) (let ((rest _144)) (let ((_159 (cond-else-clause? first))) (let ((_145 _159)) (if _145 (let ((_160 (null? rest))) (let ((_146 _160)) (if _146 (let ((_161 (cond-actions first))) (let ((_147 _161)) (let ((_162 (sequence->exp _147))) (let ((_148 _162)) _148)))) (error "ELSE clause isn't last -- COND->IF" clauses)))) (let ((_163 (cond-predicate first))) (let ((_151 _163)) (let ((_164 (cond-actions first))) (let ((_152 _164)) (let ((_149 _152)) (let ((_165 (sequence->exp _149))) (let ((_153 _165)) (let ((_150 _153)) (let ((_166 (expand-clauses rest))) (let ((_154 _166)) (let ((_167 (make-if _151 _150 _154))) (let ((_155 _167)) _155))))))))))))))))))))))))))) (letrec ((cond->if (lambda (exp) (let ((_170 (cond-clauses exp))) (let ((_168 _170)) (let ((_171 (expand-clauses _168))) (let ((_169 _171)) _169))))))) (letrec ((true? (lambda (x) (let ((_174 (eq? x #f))) (let ((_172 _174)) (let ((_175 (not _172))) (let ((_173 _175)) _173))))))) (letrec ((false? (lambda (x) (eq? x #f)))) (letrec ((make-procedure (lambda (parameters body env) (let ((_178 (quote procedure))) (let ((_176 _178)) (let ((_179 (list _176 parameters body env))) (let ((_177 _179)) _177))))))) (letrec ((compound-procedure? (lambda (p) (let ((_182 (quote procedure))) (let ((_180 _182)) (let ((_183 (tagged-list? p _180))) (let ((_181 _183)) _181))))))) (letrec ((procedure-parameters (lambda (p) (cadr p)))) (letrec ((procedure-body (lambda (p) (caddr p)))) (letrec ((procedure-environment (lambda (p) (cadddr p)))) (letrec ((enclosing-environment (lambda (env) (cdr env)))) (letrec ((first-frame (lambda (env) (car env)))) (let ((_184 (quote ()))) (let ((the-empty-environment _184)) (letrec ((make-frame (lambda (variables values) (cons variables values)))) (letrec ((frame-variables (lambda (frame) (car frame)))) (letrec ((frame-values (lambda (frame) (cdr frame)))) (letrec ((add-binding-to-frame! (lambda (var val frame) (let ((_202 (car frame))) (let ((_194 _202)) (let ((_191 _194)) (let ((_188 _191)) (let ((_186 _188)) (let ((_203 (cons var _186))) (let ((_195 _203)) (let ((_192 _195)) (let ((_189 _192)) (let ((_187 _189)) (let ((_204 (set-car! frame _187))) (let ((_196 _204)) (let ((_193 _196)) (let ((_190 _193)) (let ((_185 _190)) (let ((_205 (cdr frame))) (let ((_199 _205)) (let ((_197 _199)) (let ((_206 (cons val _197))) (let ((_200 _206)) (let ((_198 _200)) (let ((_207 (set-cdr! frame _198))) (let ((_201 _207)) _201)))))))))))))))))))))))))) (letrec ((extend-environment (lambda (vars vals base-env) (let ((_222 (length vars))) (let ((_211 _222)) (let ((_208 _211)) (let ((_223 (length vals))) (let ((_212 _223)) (let ((_209 _212)) (let ((_224 (= _208 _209))) (let ((_213 _224)) (let ((_210 _213)) (if _210 (let ((_225 (make-frame vars vals))) (let ((_214 _225)) (let ((_226 (cons _214 base-env))) (let ((_215 _226)) _215)))) (let ((_227 (length vars))) (let ((_219 _227)) (let ((_216 _219)) (let ((_228 (length vals))) (let ((_220 _228)) (let ((_217 _220)) (let ((_229 (< _216 _217))) (let ((_221 _229)) (let ((_218 _221)) (if _218 (error "Too many arguments supplied" vars vals) (error "Too few arguments supplied" vars vals)))))))))))))))))))))))) (letrec ((lookup-variable-value (lambda (var env) (letrec ((env-loop (lambda (env) (letrec ((scan (lambda (vars vals) (let ((_303 (null? vars))) (let ((_295 _303)) (let ((_282 _295)) (let ((_274 _282)) (let ((_261 _274)) (let ((_253 _261)) (let ((_240 _253)) (let ((_230 _240)) (if _230 (let ((_304 (enclosing-environment env))) (let ((_296 _304)) (let ((_283 _296)) (let ((_275 _283)) (let ((_262 _275)) (let ((_254 _262)) (let ((_241 _254)) (let ((_231 _241)) (let ((_305 (env-loop _231))) (let ((_297 _305)) (let ((_284 _297)) (let ((_276 _284)) (let ((_263 _276)) (let ((_255 _263)) (let ((_242 _255)) (let ((_232 _242)) _232)))))))))))))))) (let ((_306 (car vars))) (let ((_298 _306)) (let ((_285 _298)) (let ((_277 _285)) (let ((_264 _277)) (let ((_256 _264)) (let ((_243 _256)) (let ((_235 _243)) (let ((_233 _235)) (let ((_307 (eq? var _233))) (let ((_299 _307)) (let ((_286 _299)) (let ((_278 _286)) (let ((_265 _278)) (let ((_257 _265)) (let ((_244 _257)) (let ((_236 _244)) (let ((_234 _236)) (if _234 (car vals) (let ((_308 (cdr vars))) (let ((_300 _308)) (let ((_287 _300)) (let ((_279 _287)) (let ((_266 _279)) (let ((_258 _266)) (let ((_245 _258)) (let ((_237 _245)) (let ((_309 (cdr vals))) (let ((_301 _309)) (let ((_288 _301)) (let ((_280 _288)) (let ((_267 _280)) (let ((_259 _267)) (let ((_246 _259)) (let ((_238 _246)) (let ((_310 (scan _237 _238))) (let ((_302 _310)) (let ((_289 _302)) (let ((_281 _289)) (let ((_268 _281)) (let ((_260 _268)) (let ((_247 _260)) (let ((_239 _247)) _239))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((_311 (eq? env the-empty-environment))) (let ((_290 _311)) (let ((_269 _290)) (let ((_248 _269)) (if _248 (error "Unbound variable" var) (let ((_312 (first-frame env))) (let ((_291 _312)) (let ((_270 _291)) (let ((_249 _270)) (let ((frame _249)) (let ((_313 (frame-variables frame))) (let ((_292 _313)) (let ((_271 _292)) (let ((_250 _271)) (let ((_314 (frame-values frame))) (let ((_293 _314)) (let ((_272 _293)) (let ((_251 _272)) (let ((_315 (scan _250 _251))) (let ((_294 _315)) (let ((_273 _294)) (let ((_252 _273)) _252)))))))))))))))))))))))))) (env-loop env))))) (letrec ((set-variable-value! (lambda (var val env) (letrec ((env-loop (lambda (env) (letrec ((scan (lambda (vars vals) (let ((_389 (null? vars))) (let ((_381 _389)) (let ((_368 _381)) (let ((_360 _368)) (let ((_347 _360)) (let ((_339 _347)) (let ((_326 _339)) (let ((_316 _326)) (if _316 (let ((_390 (enclosing-environment env))) (let ((_382 _390)) (let ((_369 _382)) (let ((_361 _369)) (let ((_348 _361)) (let ((_340 _348)) (let ((_327 _340)) (let ((_317 _327)) (let ((_391 (env-loop _317))) (let ((_383 _391)) (let ((_370 _383)) (let ((_362 _370)) (let ((_349 _362)) (let ((_341 _349)) (let ((_328 _341)) (let ((_318 _328)) _318)))))))))))))))) (let ((_392 (car vars))) (let ((_384 _392)) (let ((_371 _384)) (let ((_363 _371)) (let ((_350 _363)) (let ((_342 _350)) (let ((_329 _342)) (let ((_321 _329)) (let ((_319 _321)) (let ((_393 (eq? var _319))) (let ((_385 _393)) (let ((_372 _385)) (let ((_364 _372)) (let ((_351 _364)) (let ((_343 _351)) (let ((_330 _343)) (let ((_322 _330)) (let ((_320 _322)) (if _320 (set-car! vals val) (let ((_394 (cdr vars))) (let ((_386 _394)) (let ((_373 _386)) (let ((_365 _373)) (let ((_352 _365)) (let ((_344 _352)) (let ((_331 _344)) (let ((_323 _331)) (let ((_395 (cdr vals))) (let ((_387 _395)) (let ((_374 _387)) (let ((_366 _374)) (let ((_353 _366)) (let ((_345 _353)) (let ((_332 _345)) (let ((_324 _332)) (let ((_396 (scan _323 _324))) (let ((_388 _396)) (let ((_375 _388)) (let ((_367 _375)) (let ((_354 _367)) (let ((_346 _354)) (let ((_333 _346)) (let ((_325 _333)) _325))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((_397 (eq? env the-empty-environment))) (let ((_376 _397)) (let ((_355 _376)) (let ((_334 _355)) (if _334 (error "Unbound variable -- SET!" var) (let ((_398 (first-frame env))) (let ((_377 _398)) (let ((_356 _377)) (let ((_335 _356)) (let ((frame _335)) (let ((_399 (frame-variables frame))) (let ((_378 _399)) (let ((_357 _378)) (let ((_336 _357)) (let ((_400 (frame-values frame))) (let ((_379 _400)) (let ((_358 _379)) (let ((_337 _358)) (let ((_401 (scan _336 _337))) (let ((_380 _401)) (let ((_359 _380)) (let ((_338 _359)) _338)))))))))))))))))))))))))) (env-loop env))))) (letrec ((define-variable! (lambda (var val env) (let ((_420 (first-frame env))) (let ((_402 _420)) (let ((frame _402)) (letrec ((scan (lambda (vars vals) (let ((_427 (null? vars))) (let ((_421 _427)) (let ((_411 _421)) (let ((_403 _411)) (if _403 (add-binding-to-frame! var val frame) (let ((_428 (car vars))) (let ((_422 _428)) (let ((_412 _422)) (let ((_406 _412)) (let ((_404 _406)) (let ((_429 (eq? var _404))) (let ((_423 _429)) (let ((_413 _423)) (let ((_407 _413)) (let ((_405 _407)) (if _405 (set-car! vals val) (let ((_430 (cdr vars))) (let ((_424 _430)) (let ((_414 _424)) (let ((_408 _414)) (let ((_431 (cdr vals))) (let ((_425 _431)) (let ((_415 _425)) (let ((_409 _415)) (let ((_432 (scan _408 _409))) (let ((_426 _432)) (let ((_416 _426)) (let ((_410 _416)) _410))))))))))))))))))))))))))))))) (let ((_433 (frame-variables frame))) (let ((_417 _433)) (let ((_434 (frame-values frame))) (let ((_418 _434)) (let ((_435 (scan _417 _418))) (let ((_419 _435)) _419))))))))))))) (letrec ((primitive-procedure? (lambda (proc) (let ((_438 (quote primitive))) (let ((_436 _438)) (let ((_439 (tagged-list? proc _436))) (let ((_437 _439)) _437))))))) (letrec ((primitive-implementation (lambda (proc) (cadr proc)))) (let ((_469 (quote car))) (let ((_454 _469)) (let ((_440 _454)) (let ((_470 (list _440 car))) (let ((_455 _470)) (let ((_441 _455)) (let ((_471 (quote cdr))) (let ((_456 _471)) (let ((_442 _456)) (let ((_472 (list _442 cdr))) (let ((_457 _472)) (let ((_443 _457)) (let ((_473 (quote cons))) (let ((_458 _473)) (let ((_444 _458)) (let ((_474 (list _444 cons))) (let ((_459 _474)) (let ((_445 _459)) (let ((_475 (quote null?))) (let ((_460 _475)) (let ((_446 _460)) (let ((_476 (list _446 null?))) (let ((_461 _476)) (let ((_447 _461)) (let ((_477 (quote =))) (let ((_462 _477)) (let ((_448 _462)) (let ((_478 (list _448 =))) (let ((_463 _478)) (let ((_449 _463)) (let ((_479 (quote *))) (let ((_464 _479)) (let ((_450 _464)) (let ((_480 (list _450 *))) (let ((_465 _480)) (let ((_451 _465)) (let ((_481 (quote -))) (let ((_466 _481)) (let ((_452 _466)) (let ((_482 (list _452 -))) (let ((_467 _482)) (let ((_453 _467)) (let ((_483 (list _441 _443 _445 _447 _449 _451 _453))) (let ((_468 _483)) (let ((primitive-procedures _468)) (letrec ((primitive-procedure-names (lambda () (map car primitive-procedures)))) (letrec ((primitive-procedure-objects (lambda () (map (lambda (proc) (let ((_487 (quote primitive))) (let ((_484 _487)) (let ((_488 (cadr proc))) (let ((_485 _488)) (let ((_489 (list _484 _485))) (let ((_486 _489)) _486))))))) primitive-procedures)))) (letrec ((setup-environment (lambda () (let ((_510 (primitive-procedure-names))) (let ((_493 _510)) (let ((_490 _493)) (let ((_511 (primitive-procedure-objects))) (let ((_494 _511)) (let ((_491 _494)) (let ((_512 (extend-environment _490 _491 the-empty-environment))) (let ((_495 _512)) (let ((_492 _495)) (let ((initial-env _492)) (let ((_513 (quote true))) (let ((_504 _513)) (let ((_502 _504)) (let ((_497 _502)) (let ((_514 (define-variable! _497 #t initial-env))) (let ((_505 _514)) (let ((_503 _505)) (let ((_498 _503)) (let ((_496 _498)) (let ((_515 (quote false))) (let ((_508 _515)) (let ((_506 _508)) (let ((_500 _506)) (let ((_516 (define-variable! _500 #f initial-env))) (let ((_509 _516)) (let ((_507 _509)) (let ((_501 _507)) (let ((_499 _501)) initial-env))))))))))))))))))))))))))))))) (let ((_517 (setup-environment))) (let ((the-global-environment _517)) (letrec ((apply-primitive-procedure (lambda (proc args) (let ((_520 (primitive-implementation proc))) (let ((_518 _520)) (let ((_521 (apply _518 args))) (let ((_519 _521)) _519))))))) (letrec ((eval (lambda (exp env) (letrec ((eval-sequence (lambda (exps env) (let ((_648 (last-exp? exps))) (let ((_641 _648)) (let ((_534 _641)) (let ((_522 _534)) (if _522 (let ((_649 (first-exp exps))) (let ((_642 _649)) (let ((_535 _642)) (let ((_523 _535)) (let ((_650 (eval _523 env))) (let ((_643 _650)) (let ((_536 _643)) (let ((_524 _536)) _524)))))))) (let ((_651 (first-exp exps))) (let ((_644 _651)) (let ((_537 _644)) (let ((_530 _537)) (let ((_528 _530)) (let ((_526 _528)) (let ((_652 (eval _526 env))) (let ((_645 _652)) (let ((_538 _645)) (let ((_531 _538)) (let ((_529 _531)) (let ((_527 _529)) (let ((_525 _527)) (let ((_653 (rest-exps exps))) (let ((_646 _653)) (let ((_539 _646)) (let ((_532 _539)) (let ((_654 (eval-sequence _532 env))) (let ((_647 _654)) (let ((_540 _647)) (let ((_533 _540)) _533))))))))))))))))))))))))))))) (letrec ((mcapply (lambda (procedure arguments) (let ((_662 (primitive-procedure? procedure))) (let ((_655 _662)) (let ((_551 _655)) (let ((_541 _551)) (if _541 (apply-primitive-procedure procedure arguments) (let ((_663 (compound-procedure? procedure))) (let ((_656 _663)) (let ((_552 _656)) (let ((_542 _552)) (if _542 (let ((_664 (procedure-body procedure))) (let ((_657 _664)) (let ((_553 _657)) (let ((_546 _553)) (let ((_665 (procedure-parameters procedure))) (let ((_658 _665)) (let ((_554 _658)) (let ((_547 _554)) (let ((_543 _547)) (let ((_666 (procedure-environment procedure))) (let ((_659 _666)) (let ((_555 _659)) (let ((_548 _555)) (let ((_544 _548)) (let ((_667 (extend-environment _543 arguments _544))) (let ((_660 _667)) (let ((_556 _660)) (let ((_549 _556)) (let ((_545 _549)) (let ((_668 (eval-sequence _546 _545))) (let ((_661 _668)) (let ((_557 _661)) (let ((_550 _557)) _550))))))))))))))))))))))) (error "Unknown procedure type -- APPLY" procedure)))))))))))))) (letrec ((eval-if (lambda (exp env) (let ((_676 (if-predicate exp))) (let ((_669 _676)) (let ((_570 _669)) (let ((_563 _570)) (let ((_560 _563)) (let ((_558 _560)) (let ((_677 (eval _558 env))) (let ((_670 _677)) (let ((_571 _670)) (let ((_564 _571)) (let ((_561 _564)) (let ((_559 _561)) (let ((_678 (true? _559))) (let ((_671 _678)) (let ((_572 _671)) (let ((_565 _572)) (let ((_562 _565)) (if _562 (let ((_679 (if-consequent exp))) (let ((_672 _679)) (let ((_573 _672)) (let ((_566 _573)) (let ((_680 (eval _566 env))) (let ((_673 _680)) (let ((_574 _673)) (let ((_567 _574)) _567)))))))) (let ((_681 (if-alternative exp))) (let ((_674 _681)) (let ((_575 _674)) (let ((_568 _575)) (let ((_682 (eval _568 env))) (let ((_675 _682)) (let ((_576 _675)) (let ((_569 _576)) _569))))))))))))))))))))))))))))) (letrec ((eval-assignment (lambda (exp env) (let ((_687 (assignment-variable exp))) (let ((_683 _687)) (let ((_592 _683)) (let ((_588 _592)) (let ((_584 _588)) (let ((_580 _584)) (let ((_688 (assignment-value exp))) (let ((_684 _688)) (let ((_593 _684)) (let ((_589 _593)) (let ((_585 _589)) (let ((_581 _585)) (let ((_578 _581)) (let ((_689 (eval _578 env))) (let ((_685 _689)) (let ((_594 _685)) (let ((_590 _594)) (let ((_586 _590)) (let ((_582 _586)) (let ((_579 _582)) (let ((_690 (set-variable-value! _580 _579 env))) (let ((_686 _690)) (let ((_595 _686)) (let ((_591 _595)) (let ((_587 _591)) (let ((_583 _587)) (let ((_577 _583)) (quote ok))))))))))))))))))))))))))))))) (letrec ((eval-definition (lambda (exp env) (let ((_695 (definition-variable exp))) (let ((_691 _695)) (let ((_611 _691)) (let ((_607 _611)) (let ((_603 _607)) (let ((_599 _603)) (let ((_696 (definition-value exp))) (let ((_692 _696)) (let ((_612 _692)) (let ((_608 _612)) (let ((_604 _608)) (let ((_600 _604)) (let ((_597 _600)) (let ((_697 (eval _597 env))) (let ((_693 _697)) (let ((_613 _693)) (let ((_609 _613)) (let ((_605 _609)) (let ((_601 _605)) (let ((_598 _601)) (let ((_698 (define-variable! _599 _598 env))) (let ((_694 _698)) (let ((_614 _694)) (let ((_610 _614)) (let ((_606 _610)) (let ((_602 _606)) (let ((_596 _602)) (quote ok))))))))))))))))))))))))))))))) (let ((_699 (self-evaluating? exp))) (let ((_615 _699)) (if _615 exp (let ((_700 (variable? exp))) (let ((_616 _700)) (if _616 (lookup-variable-value exp env) (let ((_701 (quoted? exp))) (let ((_617 _701)) (if _617 (text-of-quotation exp) (let ((_702 (assignment? exp))) (let ((_618 _702)) (if _618 (eval-assignment exp env) (let ((_703 (definition? exp))) (let ((_619 _703)) (if _619 (eval-definition exp env) (let ((_704 (if? exp))) (let ((_620 _704)) (if _620 (eval-if exp env) (let ((_705 (lambda? exp))) (let ((_621 _705)) (if _621 (let ((_706 (lambda-parameters exp))) (let ((_622 _706)) (let ((_707 (lambda-body exp))) (let ((_623 _707)) (let ((_708 (make-procedure _622 _623 env))) (let ((_624 _708)) _624)))))) (let ((_709 (begin? exp))) (let ((_625 _709)) (if _625 (let ((_710 (begin-actions exp))) (let ((_626 _710)) (let ((_711 (eval-sequence _626 env))) (let ((_627 _711)) _627)))) (let ((_712 (cond? exp))) (let ((_628 _712)) (if _628 (let ((_713 (cond->if exp))) (let ((_629 _713)) (let ((_714 (eval _629 env))) (let ((_630 _714)) _630)))) (let ((_715 (application? exp))) (let ((_631 _715)) (if _631 (let ((_716 (operator exp))) (let ((_636 _716)) (let ((_632 _636)) (let ((_717 (eval _632 env))) (let ((_637 _717)) (let ((_633 _637)) (let ((_718 (operands exp))) (let ((_638 _718)) (let ((_634 _638)) (let ((_719 (list-of-values _634 env))) (let ((_639 _719)) (let ((_635 _639)) (let ((_720 (mcapply _633 _635))) (let ((_640 _720)) _640)))))))))))))) (error "Unknown expression type -- EVAL" exp))))))))))))))))))))))))))))))))))))))) (let ((_1122 (quote define))) (let ((_1080 _1122)) (let ((_1038 _1080)) (let ((_997 _1038)) (let ((_1123 (quote fac))) (let ((_1081 _1123)) (let ((_1039 _1081)) (let ((_998 _1039)) (let ((_958 _998)) (let ((_725 _958)) (let ((_1124 (quote n))) (let ((_1082 _1124)) (let ((_1040 _1082)) (let ((_999 _1040)) (let ((_959 _999)) (let ((_726 _959)) (let ((_722 _726)) (let ((_1125 (quote ()))) (let ((_1083 _1125)) (let ((_1041 _1083)) (let ((_1000 _1041)) (let ((_960 _1000)) (let ((_727 _960)) (let ((_723 _727)) (let ((_1126 (cons _722 _723))) (let ((_1084 _1126)) (let ((_1042 _1084)) (let ((_1001 _1042)) (let ((_961 _1001)) (let ((_728 _961)) (let ((_724 _728)) (let ((_1127 (cons _725 _724))) (let ((_1085 _1127)) (let ((_1043 _1085)) (let ((_1002 _1043)) (let ((_962 _1002)) (let ((_729 _962)) (let ((_1128 (quote if))) (let ((_1086 _1128)) (let ((_1044 _1086)) (let ((_1003 _1044)) (let ((_963 _1003)) (let ((_925 _963)) (let ((_894 _925)) (let ((_1129 (quote =))) (let ((_1087 _1129)) (let ((_1045 _1087)) (let ((_1004 _1045)) (let ((_964 _1004)) (let ((_926 _964)) (let ((_895 _926)) (let ((_865 _895)) (let ((_738 _865)) (let ((_1130 (quote n))) (let ((_1088 _1130)) (let ((_1046 _1088)) (let ((_1005 _1046)) (let ((_965 _1005)) (let ((_927 _965)) (let ((_896 _927)) (let ((_866 _896)) (let ((_739 _866)) (let ((_733 _739)) (let ((_1131 (quote 0))) (let ((_1089 _1131)) (let ((_1047 _1089)) (let ((_1006 _1047)) (let ((_966 _1006)) (let ((_928 _966)) (let ((_897 _928)) (let ((_867 _897)) (let ((_740 _867)) (let ((_734 _740)) (let ((_730 _734)) (let ((_1132 (quote ()))) (let ((_1090 _1132)) (let ((_1048 _1090)) (let ((_1007 _1048)) (let ((_967 _1007)) (let ((_929 _967)) (let ((_898 _929)) (let ((_868 _898)) (let ((_741 _868)) (let ((_735 _741)) (let ((_731 _735)) (let ((_1133 (cons _730 _731))) (let ((_1091 _1133)) (let ((_1049 _1091)) (let ((_1008 _1049)) (let ((_968 _1008)) (let ((_930 _968)) (let ((_899 _930)) (let ((_869 _899)) (let ((_742 _869)) (let ((_736 _742)) (let ((_732 _736)) (let ((_1134 (cons _733 _732))) (let ((_1092 _1134)) (let ((_1050 _1092)) (let ((_1009 _1050)) (let ((_969 _1009)) (let ((_931 _969)) (let ((_900 _931)) (let ((_870 _900)) (let ((_743 _870)) (let ((_737 _743)) (let ((_1135 (cons _738 _737))) (let ((_1093 _1135)) (let ((_1051 _1093)) (let ((_1010 _1051)) (let ((_970 _1010)) (let ((_932 _970)) (let ((_901 _932)) (let ((_871 _901)) (let ((_744 _871)) (let ((_1136 (quote 1))) (let ((_1094 _1136)) (let ((_1052 _1094)) (let ((_1011 _1052)) (let ((_971 _1011)) (let ((_933 _971)) (let ((_902 _933)) (let ((_872 _902)) (let ((_844 _872)) (let ((_1137 (quote *))) (let ((_1095 _1137)) (let ((_1053 _1095)) (let ((_1012 _1053)) (let ((_972 _1012)) (let ((_934 _972)) (let ((_903 _934)) (let ((_873 _903)) (let ((_845 _873)) (let ((_825 _845)) (let ((_808 _825)) (let ((_1138 (quote n))) (let ((_1096 _1138)) (let ((_1054 _1096)) (let ((_1013 _1054)) (let ((_973 _1013)) (let ((_935 _973)) (let ((_904 _935)) (let ((_874 _904)) (let ((_846 _874)) (let ((_826 _846)) (let ((_809 _826)) (let ((_793 _809)) (let ((_1139 (quote fac))) (let ((_1097 _1139)) (let ((_1055 _1097)) (let ((_1014 _1055)) (let ((_974 _1014)) (let ((_936 _974)) (let ((_905 _936)) (let ((_875 _905)) (let ((_847 _875)) (let ((_827 _847)) (let ((_810 _827)) (let ((_794 _810)) (let ((_780 _794)) (let ((_769 _780)) (let ((_1140 (quote -))) (let ((_1098 _1140)) (let ((_1056 _1098)) (let ((_1015 _1056)) (let ((_975 _1015)) (let ((_937 _975)) (let ((_906 _937)) (let ((_876 _906)) (let ((_848 _876)) (let ((_828 _848)) (let ((_811 _828)) (let ((_795 _811)) (let ((_781 _795)) (let ((_770 _781)) (let ((_760 _770)) (let ((_753 _760)) (let ((_1141 (quote n))) (let ((_1099 _1141)) (let ((_1057 _1099)) (let ((_1016 _1057)) (let ((_976 _1016)) (let ((_938 _976)) (let ((_907 _938)) (let ((_877 _907)) (let ((_849 _877)) (let ((_829 _849)) (let ((_812 _829)) (let ((_796 _812)) (let ((_782 _796)) (let ((_771 _782)) (let ((_761 _771)) (let ((_754 _761)) (let ((_748 _754)) (let ((_1142 (quote 1))) (let ((_1100 _1142)) (let ((_1058 _1100)) (let ((_1017 _1058)) (let ((_977 _1017)) (let ((_939 _977)) (let ((_908 _939)) (let ((_878 _908)) (let ((_850 _878)) (let ((_830 _850)) (let ((_813 _830)) (let ((_797 _813)) (let ((_783 _797)) (let ((_772 _783)) (let ((_762 _772)) (let ((_755 _762)) (let ((_749 _755)) (let ((_745 _749)) (let ((_1143 (quote ()))) (let ((_1101 _1143)) (let ((_1059 _1101)) (let ((_1018 _1059)) (let ((_978 _1018)) (let ((_940 _978)) (let ((_909 _940)) (let ((_879 _909)) (let ((_851 _879)) (let ((_831 _851)) (let ((_814 _831)) (let ((_798 _814)) (let ((_784 _798)) (let ((_773 _784)) (let ((_763 _773)) (let ((_756 _763)) (let ((_750 _756)) (let ((_746 _750)) (let ((_1144 (cons _745 _746))) (let ((_1102 _1144)) (let ((_1060 _1102)) (let ((_1019 _1060)) (let ((_979 _1019)) (let ((_941 _979)) (let ((_910 _941)) (let ((_880 _910)) (let ((_852 _880)) (let ((_832 _852)) (let ((_815 _832)) (let ((_799 _815)) (let ((_785 _799)) (let ((_774 _785)) (let ((_764 _774)) (let ((_757 _764)) (let ((_751 _757)) (let ((_747 _751)) (let ((_1145 (cons _748 _747))) (let ((_1103 _1145)) (let ((_1061 _1103)) (let ((_1020 _1061)) (let ((_980 _1020)) (let ((_942 _980)) (let ((_911 _942)) (let ((_881 _911)) (let ((_853 _881)) (let ((_833 _853)) (let ((_816 _833)) (let ((_800 _816)) (let ((_786 _800)) (let ((_775 _786)) (let ((_765 _775)) (let ((_758 _765)) (let ((_752 _758)) (let ((_1146 (cons _753 _752))) (let ((_1104 _1146)) (let ((_1062 _1104)) (let ((_1021 _1062)) (let ((_981 _1021)) (let ((_943 _981)) (let ((_912 _943)) (let ((_882 _912)) (let ((_854 _882)) (let ((_834 _854)) (let ((_817 _834)) (let ((_801 _817)) (let ((_787 _801)) (let ((_776 _787)) (let ((_766 _776)) (let ((_759 _766)) (let ((_1147 (quote ()))) (let ((_1105 _1147)) (let ((_1063 _1105)) (let ((_1022 _1063)) (let ((_982 _1022)) (let ((_944 _982)) (let ((_913 _944)) (let ((_883 _913)) (let ((_855 _883)) (let ((_835 _855)) (let ((_818 _835)) (let ((_802 _818)) (let ((_788 _802)) (let ((_777 _788)) (let ((_767 _777)) (let ((_1148 (cons _759 _767))) (let ((_1106 _1148)) (let ((_1064 _1106)) (let ((_1023 _1064)) (let ((_983 _1023)) (let ((_945 _983)) (let ((_914 _945)) (let ((_884 _914)) (let ((_856 _884)) (let ((_836 _856)) (let ((_819 _836)) (let ((_803 _819)) (let ((_789 _803)) (let ((_778 _789)) (let ((_768 _778)) (let ((_1149 (cons _769 _768))) (let ((_1107 _1149)) (let ((_1065 _1107)) (let ((_1024 _1065)) (let ((_984 _1024)) (let ((_946 _984)) (let ((_915 _946)) (let ((_885 _915)) (let ((_857 _885)) (let ((_837 _857)) (let ((_820 _837)) (let ((_804 _820)) (let ((_790 _804)) (let ((_779 _790)) (let ((_1150 (quote ()))) (let ((_1108 _1150)) (let ((_1066 _1108)) (let ((_1025 _1066)) (let ((_985 _1025)) (let ((_947 _985)) (let ((_916 _947)) (let ((_886 _916)) (let ((_858 _886)) (let ((_838 _858)) (let ((_821 _838)) (let ((_805 _821)) (let ((_791 _805)) (let ((_1151 (cons _779 _791))) (let ((_1109 _1151)) (let ((_1067 _1109)) (let ((_1026 _1067)) (let ((_986 _1026)) (let ((_948 _986)) (let ((_917 _948)) (let ((_887 _917)) (let ((_859 _887)) (let ((_839 _859)) (let ((_822 _839)) (let ((_806 _822)) (let ((_792 _806)) (let ((_1152 (cons _793 _792))) (let ((_1110 _1152)) (let ((_1068 _1110)) (let ((_1027 _1068)) (let ((_987 _1027)) (let ((_949 _987)) (let ((_918 _949)) (let ((_888 _918)) (let ((_860 _888)) (let ((_840 _860)) (let ((_823 _840)) (let ((_807 _823)) (let ((_1153 (cons _808 _807))) (let ((_1111 _1153)) (let ((_1069 _1111)) (let ((_1028 _1069)) (let ((_988 _1028)) (let ((_950 _988)) (let ((_919 _950)) (let ((_889 _919)) (let ((_861 _889)) (let ((_841 _861)) (let ((_824 _841)) (let ((_1154 (quote ()))) (let ((_1112 _1154)) (let ((_1070 _1112)) (let ((_1029 _1070)) (let ((_989 _1029)) (let ((_951 _989)) (let ((_920 _951)) (let ((_890 _920)) (let ((_862 _890)) (let ((_842 _862)) (let ((_1155 (cons _824 _842))) (let ((_1113 _1155)) (let ((_1071 _1113)) (let ((_1030 _1071)) (let ((_990 _1030)) (let ((_952 _990)) (let ((_921 _952)) (let ((_891 _921)) (let ((_863 _891)) (let ((_843 _863)) (let ((_1156 (cons _844 _843))) (let ((_1114 _1156)) (let ((_1072 _1114)) (let ((_1031 _1072)) (let ((_991 _1031)) (let ((_953 _991)) (let ((_922 _953)) (let ((_892 _922)) (let ((_864 _892)) (let ((_1157 (cons _744 _864))) (let ((_1115 _1157)) (let ((_1073 _1115)) (let ((_1032 _1073)) (let ((_992 _1032)) (let ((_954 _992)) (let ((_923 _954)) (let ((_893 _923)) (let ((_1158 (cons _894 _893))) (let ((_1116 _1158)) (let ((_1074 _1116)) (let ((_1033 _1074)) (let ((_993 _1033)) (let ((_955 _993)) (let ((_924 _955)) (let ((_1159 (quote ()))) (let ((_1117 _1159)) (let ((_1075 _1117)) (let ((_1034 _1075)) (let ((_994 _1034)) (let ((_956 _994)) (let ((_1160 (cons _924 _956))) (let ((_1118 _1160)) (let ((_1076 _1118)) (let ((_1035 _1076)) (let ((_995 _1035)) (let ((_957 _995)) (let ((_1161 (cons _729 _957))) (let ((_1119 _1161)) (let ((_1077 _1119)) (let ((_1036 _1077)) (let ((_996 _1036)) (let ((_1162 (cons _997 _996))) (let ((_1120 _1162)) (let ((_1078 _1120)) (let ((_1037 _1078)) (let ((_1163 (eval _1037 the-global-environment))) (let ((_1121 _1163)) (let ((_1079 _1121)) (let ((_721 _1079)) (let ((_1172 (quote fac))) (let ((_1167 _1172)) (let ((_1173 (quote 8))) (let ((_1168 _1173)) (let ((_1164 _1168)) (let ((_1174 (quote ()))) (let ((_1169 _1174)) (let ((_1165 _1169)) (let ((_1175 (cons _1164 _1165))) (let ((_1170 _1175)) (let ((_1166 _1170)) (let ((_1176 (cons _1167 _1166))) (let ((_1171 _1176)) (let ((_1177 (eval _1171 the-global-environment
