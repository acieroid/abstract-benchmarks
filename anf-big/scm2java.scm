(letrec ((cadr (lambda (p) (let ((_1 (cdr p))) (let ((_2 (car _1))) _2))))) (letrec ((caadr (lambda (p) (let ((_3 (cdr p))) (let ((_4 (car _3))) (let ((_5 (car _4))) _5)))))) (letrec ((caddr (lambda (p) (let ((_6 (cdr p))) (let ((_7 (cdr _6))) (let ((_8 (car _7))) _8)))))) (letrec ((cadddr (lambda (p) (let ((_9 (cdr p))) (let ((_10 (cdr _9))) (let ((_11 (cdr _10))) (let ((_12 (car _11))) _12))))))) (letrec ((map (lambda (f lst) (let ((_13 (pair? lst))) (if _13 (let ((_14 (car lst))) (let ((_15 (f _14))) (let ((_16 (cdr lst))) (let ((_17 (map f _16))) (let ((_18 (cons _15 _17))) _18))))) '()))))) (letrec ((append (lambda (lst1 lst2) (let ((_19 (pair? lst1))) (let ((_20 (not _19))) (if _20 lst2 (let ((_21 (car lst1))) (let ((_22 (cdr lst1))) (let ((_23 (append _22 lst2))) (let ((_24 (cons _21 _23))) _24)))))))))) (letrec ((string->list (lambda (s) (letrec ((f (lambda (i) (let ((_25 (string-length s))) (let ((_26 (< i _25))) (if _26 (let ((_27 (string-ref s i))) (let ((_28 (+ i 1))) (let ((_29 (f _28))) (let ((_30 (cons _27 _29))) _30)))) '())))))) (f 0))))) (letrec ((void (lambda () #f))) (letrec ((tagged-list? (lambda (tag l) (let ((_31 (pair? l))) (let ((_32 (car l))) (let ((_33 (eq? tag _32))) (let ((_34 (and _31 _33))) _34))))))) (letrec ((char->natural (lambda (c) (let ((_35 (char->integer c))) (let ((i _35)) (let ((_36 (< i 0))) (if _36 (* -2 i) (let ((_37 (* 2 i))) (let ((_38 (+ _37 1))) _38))))))))) (letrec ((integer->char-list (lambda (n) (let ((_39 (number->string n))) (let ((_40 (string->list _39))) _40))))) (letrec ((const? (lambda (exp) (integer? exp)))) (letrec ((ref? (lambda (exp) (symbol? exp)))) (letrec ((let? (lambda (exp) (let ((_41 'let)) (let ((_42 (tagged-list? _41 exp))) _42))))) (letrec ((let->bindings (lambda (exp) (cadr exp)))) (letrec ((let->exp (lambda (exp) (caddr exp)))) (letrec ((letrec1? (lambda (exp) (let ((_43 'letrec)) (let ((_44 (tagged-list? _43 exp))) (let ((_45 (cadr exp))) (let ((_46 (length _45))) (let ((_47 (= _46 1))) (let ((_48 (and _44 _47))) _48))))))))) (letrec ((letrec1->binding (lambda (exp) (caadr exp)))) (letrec ((letrec1->exp (lambda (exp) (caddr exp)))) (letrec ((lambda? (lambda (exp) (let ((_49 'lambda)) (let ((_50 (tagged-list? _49 exp))) _50))))) (letrec ((lambda->formals (lambda (exp) (cadr exp)))) (letrec ((lambda->exp (lambda (exp) (caddr exp)))) (letrec ((if? (lambda (exp) (let ((_51 'if)) (let ((_52 (tagged-list? _51 exp))) _52))))) (letrec ((if->condition (lambda (exp) (cadr exp)))) (letrec ((if->then (lambda (exp) (caddr exp)))) (letrec ((if->else (lambda (exp) (cadddr exp)))) (letrec ((app? (lambda (exp) (pair? exp)))) (letrec ((app->fun (lambda (exp) (car exp)))) (letrec ((app->args (lambda (exp) (cdr exp)))) (letrec ((prim? (lambda (exp) (let ((_53 '+)) (let ((_54 (eq? exp _53))) (let ((_55 '-)) (let ((_56 (eq? exp _55))) (let ((_57 '*)) (let ((_58 (eq? exp _57))) (let ((_59 '=)) (let ((_60 (eq? exp _59))) (let ((_61 'display)) (let ((_62 (eq? exp _61))) (let ((_63 (or _54 _56 _58 _60 _62))) _63)))))))))))))) (letrec ((begin? (lambda (exp) (let ((_64 'begin)) (let ((_65 (tagged-list? _64 exp))) _65))))) (letrec ((begin->exps (lambda (exp) (cdr exp)))) (letrec ((set!? (lambda (exp) (let ((_66 'set!)) (let ((_67 (tagged-list? _66 exp))) _67))))) (letrec ((set!-var (lambda (exp) (cadr exp)))) (letrec ((set!-exp (lambda (exp) (caddr exp)))) (letrec ((let=>lambda (lambda (exp) (let ((_68 (let? exp))) (if _68 (let ((_69 (let->bindings exp))) (let ((_70 (map car _69))) (let ((vars _70)) (let ((_71 (let->bindings exp))) (let ((_72 (map cadr _71))) (let ((args _72)) (let ((_73 'lambda)) (let ((_74 (let->exp exp))) (let ((_75 '())) (let ((_76 (cons _74 _75))) (let ((_77 (cons vars _76))) (let ((_78 (cons _73 _77))) (let ((_79 (cons _78 args))) _79))))))))))))) exp))))) (letrec ((arity (lambda (lam) (let ((_80 (lambda->formals lam))) (let ((_81 (length _80))) _81))))) (letrec ((xargs (lambda (n) (let ((_82 (<= n 0))) (if _82 '() (let ((_83 (number->string n))) (let ((_84 (string-append "x" _83))) (let ((_85 (string->symbol _84))) (let ((_86 (- n 1))) (let ((_87 (xargs _86))) (let ((_88 (cons _85 _87))) _88))))))))))) (letrec ((Yn (lambda (n) (let ((_89 'lambda)) (let ((_90 'h)) (let ((_91 '())) (let ((_92 (cons _90 _91))) (let ((_93 'lambda)) (let ((_94 'F)) (let ((_95 '())) (let ((_96 (cons _94 _95))) (let ((_97 'F)) (let ((_98 'lambda)) (let ((_99 (xargs n))) (let ((_100 'h)) (let ((_101 'h)) (let ((_102 '())) (let ((_103 (cons _101 _102))) (let ((_104 (cons _100 _103))) (let ((_105 'F)) (let ((_106 '())) (let ((_107 (cons _105 _106))) (let ((_108 (cons _104 _107))) (let ((_109 (xargs n))) (let ((_110 (cons _108 _109))) (let ((_111 '())) (let ((_112 (cons _110 _111))) (let ((_113 (cons _99 _112))) (let ((_114 (cons _98 _113))) (let ((_115 '())) (let ((_116 (cons _114 _115))) (let ((_117 (cons _97 _116))) (let ((_118 '())) (let ((_119 (cons _117 _118))) (let ((_120 (cons _96 _119))) (let ((_121 (cons _93 _120))) (let ((_122 '())) (let ((_123 (cons _121 _122))) (let ((_124 (cons _92 _123))) (let ((_125 (cons _89 _124))) (let ((_126 'lambda)) (let ((_127 'h)) (let ((_128 '())) (let ((_129 (cons _127 _128))) (let ((_130 'lambda)) (let ((_131 'F)) (let ((_132 '())) (let ((_133 (cons _131 _132))) (let ((_134 'F)) (let ((_135 'lambda)) (let ((_136 (xargs n))) (let ((_137 'h)) (let ((_138 'h)) (let ((_139 '())) (let ((_140 (cons _138 _139))) (let ((_141 (cons _137 _140))) (let ((_142 'F)) (let ((_143 '())) (let ((_144 (cons _142 _143))) (let ((_145 (cons _141 _144))) (let ((_146 (xargs n))) (let ((_147 (cons _145 _146))) (let ((_148 '())) (let ((_149 (cons _147 _148))) (let ((_150 (cons _136 _149))) (let ((_151 (cons _135 _150))) (let ((_152 '())) (let ((_153 (cons _151 _152))) (let ((_154 (cons _134 _153))) (let ((_155 '())) (let ((_156 (cons _154 _155))) (let ((_157 (cons _133 _156))) (let ((_158 (cons _130 _157))) (let ((_159 '())) (let ((_160 (cons _158 _159))) (let ((_161 (cons _129 _160))) (let ((_162 (cons _126 _161))) (let ((_163 '())) (let ((_164 (cons _162 _163))) (let ((_165 (cons _125 _164))) _165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (letrec ((letrec1=>Y (lambda (exp) (let ((_166 (letrec1? exp))) (if _166 (let ((_167 (letrec1->binding exp))) (let ((binding _167)) (let ((_168 (car binding))) (let ((name _168)) (let ((_169 (cadr binding))) (let ((arg _169)) (let ((_170 (arity arg))) (let ((num-args _170)) (let ((_171 'let)) (let ((_172 (Yn num-args))) (let ((_173 'lambda)) (let ((_174 '())) (let ((_175 (cons name _174))) (let ((_176 '())) (let ((_177 (cons arg _176))) (let ((_178 (cons _175 _177))) (let ((_179 (cons _173 _178))) (let ((_180 '())) (let ((_181 (cons _179 _180))) (let ((_182 (cons _172 _181))) (let ((_183 '())) (let ((_184 (cons _182 _183))) (let ((_185 (cons name _184))) (let ((_186 '())) (let ((_187 (cons _185 _186))) (let ((_188 (letrec1-exp exp))) (let ((_189 '())) (let ((_190 (cons _188 _189))) (let ((_191 (cons _187 _190))) (let ((_192 (cons _171 _191))) _192)))))))))))))))))))))))))))))) exp))))) (letrec ((singlet? (lambda (l) (let ((_193 (list? l))) (let ((_194 (length l))) (let ((_195 (= _194 1))) (let ((_196 (and _193 _195))) _196))))))) (letrec ((dummy-bind (lambda (exps) (let ((_197 (singlet? exps))) (if _197 (car exps) (let ((_198 (pair? exps))) (if _198 (let ((_199 'let)) (let ((_200 '$_)) (let ((_201 (car exps))) (let ((_202 '())) (let ((_203 (cons _201 _202))) (let ((_204 (cons _200 _203))) (let ((_205 '())) (let ((_206 (cons _204 _205))) (let ((_207 (cdr exps))) (let ((_208 (dummy-bind _207))) (let ((_209 '())) (let ((_210 (cons _208 _209))) (let ((_211 (cons _206 _210))) (let ((_212 (cons _199 _211))) _212)))))))))))))) (error "no match")))))))) (letrec ((begin=>let (lambda (exp) (let ((_213 (begin->exps exp))) (let ((_214 (dummy-bind _213))) _214))))) (let ((_215 '())) (let ((mutable-variables _215)) (letrec ((mark-mutable (lambda (symbol) (let ((_216 (cons symbol mutable-variables))) (set! mutable-variables _216))))) (letrec ((is-in? (lambda (S symbol) (let ((_217 (pair? S))) (let ((_218 (not _217))) (if _218 #f (let ((_219 (car S))) (let ((_220 (eq? _219 symbol))) (if _220 #t (let ((_221 (cdr S))) (let ((_222 (is-in? _221 symbol))) _222))))))))))) (letrec ((is-mutable? (lambda (symbol) (is-in? mutable-variables symbol)))) (letrec ((analyze-mutable-variables (lambda (exp) (let ((_223 (const? exp))) (if _223 (void) (let ((_224 (ref? exp))) (if _224 (void) (let ((_225 (prim? exp))) (if _225 (void) (let ((_226 (lambda? exp))) (if _226 (let ((_227 (lambda->exp exp))) (let ((_228 (analyze-mutable-variables _227))) _228)) (let ((_229 (let? exp))) (if _229 (let ((_230 (let ((_234 (let->bindings exp))) (let ((_231 _234)) (let ((_235 (map cadr _231))) (let ((_232 _235)) (let ((_236 (map analyze-mutable-variables _232))) (let ((_233 _236)) _233)))))))) (let ((_237 (let->exp exp))) (let ((_238 (analyze-mutable-variables _237))) _238))) (let ((_239 (letrec1? exp))) (if _239 (let ((_240 (let ((_244 (letrec1->binding exp))) (let ((_241 _244)) (let ((_245 (cadr _241))) (let ((_242 _245)) (let ((_246 (analyze-mutable-variables _242))) (let ((_243 _246)) _243)))))))) (let ((_247 (letrec1->exp exp))) (let ((_248 (analyze-mutable-variables _247))) _248))) (let ((_249 (set!? exp))) (if _249 (let ((_250 (set!-var exp))) (let ((_251 (mark-mutable _250))) _251)) (let ((_252 (if? exp))) (if _252 (let ((_253 (let ((_259 (if->condition exp))) (let ((_254 _259)) (let ((_260 (analyze-mutable-variables _254))) (let ((_255 _260)) _255)))))) (let ((_256 (let ((_261 (if->then exp))) (let ((_257 _261)) (let ((_262 (analyze-mutable-variables _257))) (let ((_258 _262)) _258)))))) (let ((_263 (if->else exp))) (let ((_264 (analyze-mutable-variables _263))) _264)))) (let ((_265 (begin? exp))) (if _265 (let ((_266 (let ((_269 (begin->exps exp))) (let ((_267 _269)) (let ((_270 (map analyze-mutable-variables _267))) (let ((_268 _270)) _268)))))) (void)) (let ((_271 (app? exp))) (if _271 (let ((_273 (map analyze-mutable-variables exp))) (let ((_272 _273)) (void))) (error "unknown expression type: " exp)))))))))))))))))))))))) (letrec ((m (lambda (chars) (let ((_274 (null? chars))) (if _274 '() (let ((_275 (car chars))) (let ((_276 (char-alphabetic? _275))) (let ((_277 (car chars))) (let ((_278 (char=? _277 #\_))) (let ((_279 (not _278))) (let ((_280 (and _276 _279))) (let ((_281 (car chars))) (let ((_282 (char-numeric? _281))) (let ((_283 (or _280 _282))) (if _283 (let ((_284 (car chars))) (let ((_285 (cdr chars))) (let ((_286 (m _285))) (let ((_287 (cons _284 _286))) _287)))) (let ((_288 (car chars))) (let ((_289 (char->natural _288))) (let ((_290 (integer->char-list _289))) (let ((_291 (cdr chars))) (let ((_292 (m _291))) (let ((_293 (append _290 _292))) (let ((_294 (cons #\_ _293))) _294)))))))))))))))))))))) (letrec ((mangle (lambda (symbol) (let ((_295 (symbol->string symbol))) (let ((_296 (string->list _295))) (let ((_297 (m _296))) (let ((_298 (list->string _297))) _298))))))) (letrec ((java-compile-const (lambda (exp) (let ((_299 (integer? exp))) (if _299 (let ((_300 (number->string exp))) (let ((_301 (string-append "new IntValue(" _300 ")"))) _301)) (error "unknown constant: " exp)))))) (letrec ((java-compile-prim (lambda (p) (let ((_302 '+)) (let ((_303 (eq? _302 p))) (if _303 "sum" (let ((_304 '-)) (let ((_305 (eq? _304 p))) (if _305 "difference" (let ((_306 '*)) (let ((_307 (eq? _306 p))) (if _307 "product" (let ((_308 '=)) (let ((_309 (eq? _308 p))) (if _309 "numEqual" (let ((_310 'display)) (let ((_311 (eq? _310 p))) (if _311 "display" (error "unhandled primitive " p))))))))))))))))))) (letrec ((java-compile-ref (lambda (exp) (let ((_312 (is-mutable? exp))) (if _312 (let ((_313 (mangle exp))) (let ((_314 (string-append "m_" _313 ".value"))) _314)) (mangle exp)))))) (letrec ((java-compile-formals (lambda (formals) (let ((_315 (pair? formals))) (let ((_316 (not _315))) (if _316 "" (let ((_317 (car formals))) (let ((_318 (mangle _317))) (let ((_319 (cdr formals))) (let ((_320 (pair? _319))) (let ((_321 (string-append "final Value " _318 (if _320 (string-append ", " (java-compile-formals (cdr formals))) "")))) _321))))))))))) (letrec ((java-wrap-mutables (lambda (vars) (let ((_322 (pair? vars))) (let ((_323 (not _322))) (if _323 "" (let ((_324 (car vars))) (let ((_325 (is-mutable? _324))) (let ((_326 (cdr vars))) (let ((_327 (java-wrap-mutables _326))) (let ((_328 (string-append (if _325 (string-append " final ValueCell m_" (mangle (car vars)) " = new ValueCell(" (mangle (car vars)) ");\n") "") _327))) _328))))))))))) (letrec ((java-compile-lambda (lambda (exp) (let ((_329 (lambda->formals exp))) (let ((formals _329)) (let ((_330 (length formals))) (let ((num-args _330)) (let ((_331 (number->string num-args))) (let ((_332 (java-compile-formals formals))) (let ((_333 (java-wrap-mutables formals))) (let ((_334 (lambda->exp exp))) (let ((_335 (java-compile-exp _334))) (let ((_336 (string-append "new NullProcValue" _331 " () {\n" " public Value apply(" _332 ") {\n" _333 "\n" "  return " _335 " ;\n" "}}\n"))) _336))))))))))))) (letrec ((java-compile-args (lambda (args) (let ((_337 (pair? args))) (let ((_338 (not _337))) (if _338 "" (let ((_339 (car args))) (let ((_340 (java-compile-exp _339))) (let ((_341 (cdr args))) (let ((_342 (pair? _341))) (let ((_343 (string-append _340 (if _342 (string-append ", " (java-compile-args (cdr args))) "")))) _343))))))))))) (letrec ((java-compile-set! (lambda (exp) (let ((_344 (set!-var exp))) (let ((_345 (mangle _344))) (let ((_346 (set!-exp exp))) (let ((_347 (java-compile-exp _346))) (let ((_348 (string-append "VoidValue.Void(m_" _345 ".value = " _347 ")"))) _348)))))))) (letrec ((java-compile-app (lambda (exp) (let ((_349 (app->args exp))) (let ((args _349)) (let ((_350 (app->fun exp))) (let ((fun _350)) (let ((_351 (length args))) (let ((num-args _351)) (let ((_352 (number->string num-args))) (let ((_353 (java-compile-exp fun))) (let ((_354 (java-compile-args args))) (let ((_355 (string-append "((ProcValue" _352 ")(" _353 ")).apply(" _354 ")\n"))) _355))))))))))))) (letrec ((java-compile-if (lambda (exp) (let ((_356 (if->condition exp))) (let ((_357 (java-compile-exp _356))) (let ((_358 (if->then exp))) (let ((_359 (java-compile-exp _358))) (let ((_360 (if->else exp))) (let ((_361 (java-compile-exp _360))) (let ((_362 (string-append "(" _357 ").toBoolean() ? (" _359 ") : (" _361 ")"))) _362)))))))))) (letrec ((java-compile-exp (lambda (exp) (let ((_363 (const? exp))) (if _363 (java-compile-const exp) (let ((_364 (prim? exp))) (if _364 (java-compile-prim exp) (let ((_365 (ref? exp))) (if _365 (java-compile-ref exp) (let ((_366 (lambda? exp))) (if _366 (java-compile-lambda exp) (let ((_367 (if? exp))) (if _367 (java-compile-if exp) (let ((_368 (set!? exp))) (if _368 (java-compile-set! exp) (let ((_369 (let? exp))) (if _369 (let ((_370 (let=>lambda exp))) (let ((_371 (java-compile-exp _370))) _371)) (let ((_372 (letrec1? exp))) (if _372 (let ((_373 (letrec1=>Y exp))) (let ((_374 (java-compile-exp _373))) _374)) (let ((_375 (begin? exp))) (if _375 (let ((_376 (begin=>let exp))) (let ((_377 (java-compile-exp _376))) _377)) (let ((_378 (app? exp))) (if _378 (java-compile-app exp) (error "no match")))))))))))))))))))))))) (letrec ((java-compile-program (lambda (exp) (let ((_379 (java-compile-exp exp))) (let ((_380 (string-append "public class BOut extends RuntimeEnvironment {\n" " public static void main (String[] args) {\n" _379 " ;\n" " }\n" "}\n"))) _380))))) (let ((input-program 3)) (let ((_382 (analyze-mutable-variables input-program))) (let ((_381 _382)) (java-compile-program input-program)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
