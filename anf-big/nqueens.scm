(letrec ((append (lambda (l x) (let ((_1 (null? l))) (if _1 x (let ((_2 (car l))) (let ((_3 (cdr l))) (let ((_4 (append _3 x))) (let ((_5 (cons _2 _4))) _5))))))))) (letrec ((one-to (lambda (n) (letrec ((loop (lambda (i l) (let ((_6 (= i 0))) (if _6 l (let ((_7 (- i 1))) (let ((_8 (cons i l))) (let ((_9 (loop _7 _8))) _9)))))))) (let ((_10 (quote ()))) (let ((_11 (loop n _10))) _11)))))) (letrec ((ok? (lambda (row dist placed) (let ((_12 (null? placed))) (if _12 #t (let ((_13 (car placed))) (let ((_14 (+ row dist))) (let ((_15 (= _13 _14))) (let ((_16 (not _15))) (let ((_17 (car placed))) (let ((_18 (- row dist))) (let ((_19 (= _17 _18))) (let ((_20 (not _19))) (let ((_21 (+ dist 1))) (let ((_22 (cdr placed))) (let ((_23 (ok? row _21 _22))) (let ((_24 (and _16 _20 _23))) _24))))))))))))))))) (letrec ((try-it (lambda (x y z) (let ((_25 (null? x))) (if _25 (let ((_26 (null? y))) (if _26 1 0)) (let ((_27 (car x))) (let ((_28 (ok? _27 1 z))) (let ((_29 (cdr x))) (let ((_30 (car x))) (let ((_31 (cons _30 y))) (let ((_32 (try-it _29 _31 z))) (let ((_33 (+ (if _28 (try-it (append (cdr x) y) (quote ()) (cons (car x) z)) 0) _32))) _33)))))))))))) (letrec ((nqueens (lambda (n) (let ((_34 (one-to n))) (let ((_35 (quote ()))) (let ((_36 (quote ()))) (let ((_37 (try-it _34 _35 _36))) _37))))))) (nqueens 8))))))